
1. Given two integer numbers, return their product only if the product is equal to or lower than 1000. Otherwise, return their sum.
s-   def fun (a,b):
        c = a*b
        if c <= 1000 :
            return c 
        else :
            return a+b
        
    x = fun(40,30)
    print(x)

2. Print the sum of the current number and the previous number
s - prev = 0
    for i in range(0,10):
        x_sum= prev+i
        print("Current Number", i, "Previous Number ", prev, " Sum: ", x_sum)
    prev=i

3. Print characters from a string that are present at an even index number
s - word = input('Enter word ')
    size = len(word)
    print("Printing only even index chars")
    for i in range(0, size - 1, 2):
        print("index[", i, "]", word[i])
or     x = list(word)
      for i in x[0::2]:
        print(i)

4. Write a program to remove characters from a string starting from zero up to n and return a new string.
s - def remove_chars(word, n):
    print('Original string:', word)
    x = word[n:]
    return x
    print("Removing characters from a string")
    print(remove_chars("pynative", 4))
    print(remove_chars("pynative", 2))

5. Check if the first and last number of a list is the same
s- def first_last_same(numberList):
    print("Given list:", numberList)
    first_num = numberList[0]
    last_num = numberList[-1]
    if first_num == last_num:
        return True
    else:
        return False
    numbers_x = [10, 20, 30, 40, 10]
    print("result is", first_last_same(numbers_x))
    
    numbers_y = [75, 65, 35, 75, 30]
    print("result is", first_last_same(numbers_y))

6: Display numbers divisible by 5 from a list
s- num_list = [10, 20, 33, 46, 55]
  print("Given list:", num_list)
  print('Divisible by 5:')
  for num in num_list:
      if num % 5 == 0:
          print(num)

7: Return the count of a given substring from a string
s -  str_x = "Emma is good developer. Emma is a writer"
    # use count method of a str class
    cnt = str_x.count("Emma")
    print(cnt)

-------------------------------------------------------------------------------------List Excerise------------------------------------------------------------------------------------------------------
1: Reverse a list in Python
s - list1 = [100, 200, 300, 400, 500]
    list1.reverse()
    print(list1)
or  list1 = list1[::-1]
    print(list1)

2: Concatenate two lists index-wise
s - list1 = ["M", "na", "i", "Ke"] 
    list2 = ["y", "me", "s", "lly"]
    list3 = [i + j for i, j in zip(list1, list2)]
    print(list3)

3: Turn every item of a list into its square
s - numbers = [1, 2, 3, 4, 5, 6, 7]
    res = []
    for i in numbers:
        res.append(i * i)
    print(res)
or  res = [x * x for x in numbers]
    print(res)

4: Concatenate two lists in the following order
s - list1 = ["Hello ", "take "]
    list2 = ["Dear", "Sir"]
    res = [x + y for x in list1 for y in list2]
    print(res)

5: Iterate both lists simultaneously
s - for x, y in zip(list1, list2[::-1]):
    print(x, y)

6: Remove empty strings from the list of strings
s - res = list(filter(None, list1))
    print(res)

7: Add new item to list after a specified item
s - list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
    list1[2][2].append(7000)
    print(list1)

8: Extend nested list by adding the sublist
s - list1 = ["a", "b", ["c", ["d", "e", ["f", "g"], "k"], "l"], "m", "n"]
    sub_list = ["h", "i", "j"]
    list1[2][1][2].extend(sub_list)
    print(list1)

9: Replace list’s item with new value if found
s - index = list1.index(20)
    list1[index] = 200
    print(list1)

10: Remove all occurrences of a specific item from a list.
s - list1 = [5, 20, 15, 20, 25, 50, 20]
    def remove_value(sample_list, val):
        return [i for i in sample_list if i != val]
    res = remove_value(list1, 20)
    print(res)
or 
    while 20 in list1:
        list1.remove(20)
    print(list1)

-------------------------------------------------------------------------------------Set Excerise----------------------------------------------------------------------------------------------------------
1: Add a list of elements to a set
s- set = {"Yellow", "Orange", "Black"}
    list = ["Blue", "Green", "Red"]
    set.update(list)
    print(set)

2: Return a new set of identical items from two sets
s - set1 = {10, 20, 30, 40, 50}
    set2 = {30, 40, 50, 60, 70}
    print(set1.intersection(set2))

3: Get Only unique items from two sets
s - set1 = {10, 20, 30, 40, 50}
    set2 = {30, 40, 50, 60, 70}
    print(set1.union(set2))

4: Update the first set with items that don’t exist in the second set
s - set1 = {10, 20, 30}
    set2 = {20, 40, 50}
    set1.difference_update(set2)
    print(set1)

5: Remove items from the set at once
s - set1 = {10, 20, 30, 40, 50}
    set1.difference_update({10, 20, 30})
    print(set1)

6: Return a set of elements present in Set A or B, but not both
s- set1 = {10, 20, 30, 40, 50}
    set2 = {30, 40, 50, 60, 70}
    print(set1.symmetric_difference(set2))

7: Check if two sets have any elements in common. If yes, display the common elements
s - set1 = {10, 20, 30, 40, 50}
    set2 = {60, 70, 80, 90, 10}
    if set1.isdisjoint(set2):
      print("Two sets have no items in common")
    else:
      print("Two sets have items in common")
      print(set1.intersection(set2))

 8: Update set1 by adding items from set2, except common items
s-  set1 = {10, 20, 30, 40, 50}
    set2 = {30, 40, 50, 60, 70}
    set1.symmetric_difference_update(set2)
    print(set1)

9: Remove items from set1 that are not common to both set1 and set2
s- set1 = {10, 20, 30, 40, 50}
    set2 = {30, 40, 50, 60, 70}
    set1.intersection_update(set2)
    print(set1)

-------------------------------------------------------------------------------------Tuple Excerise-------------------------------------------------------------------------------------

1: Reverse the tuple
s - tuple1 = (10, 20, 30, 40, 50)
    tuple1 = tuple1[::-1]
    print(tuple1)

2: Access value 20 from the tuple
s- tuple1 = ("Orange", [10, 20, 30], (5, 15, 25))
    print(tuple1[1][1])

3: Create a tuple with single item 50
s- tuple1= (50, )
    print(tuple1)

4: Unpack the tuple into 4 variables
s- tuple1 = (10, 20, 30, 40)
    a, b, c, d = tuple1
    print(a)
    print(b)
    print(c)
    print(d)

5: Swap two tuples in Python
s - tuple1 = (11, 22)
    tuple2 = (99, 88)
    tuple1, tuple2 = tuple2, tuple1
    print(tuple2)
    print(tuple1)

6: Write a program to copy elements 44 and 55 from the following tuple into a new tuple.
s - tuple1 = (11, 22, 33, 44, 55, 66)
    tuple2 = tuple1[3:-1]
    print(tuple2)

7: Given is a nested tuple. Write a program to modify the first item (22) of a list inside a following tuple to 222
s - tuple1 = (11, [22, 33], 44, 55)
    tuple1[1][0] = 222
    print(tuple1)

8: Sort a tuple of tuples by 2nd item
s - tuple1 = (('a', 23), ('b', 37), ('c', 11), ('d', 29))
    tuple1 = tuple(sorted(list(tuple1), key=lambda x: x[1]))
    print(tuple1)

9: Counts the number of occurrences of item 50 from a tuple
s - tuple1 = (50, 10, 60, 70, 50)
print(tuple1.count(50))

10: Check if all items in the tuple are the same
s - def check(t):
    return all(i == t[0] for i in t)
    tuple1 = (45, 45, 45, 45)
    print(check(tuple1))

-------------------------------------------------------------------------------------Dictinary Excerise-------------------------------------------------------------------------------------

1: Convert two lists into a dictionary
s - keys = ['Ten', 'Twenty', 'Thirty']
    values = [10, 20, 30]
    res_dict = dict(zip(keys, values))
    print(res_dict)
or  
    keys = ['Ten', 'Twenty', 'Thirty']
    values = [10, 20, 30]
    res_dict = dict()
    for i in range(len(keys)):
        res_dict.update({keys[i]: values[i]})
    print(res_dict)

2: Merge two Python dictionaries into one
s-  dict1 = {'Ten': 10, 'Twenty': 20, 'Thirty': 30}
    dict2 = {'Thirty': 30, 'Fourty': 40, 'Fifty': 50}
    dict3 = dict1.copy()
    dict3.update(dict2)
    print(dict3)

3: Print the value of key ‘history’ from the below dict
s - sampleDict = {
    "class": {
        "student": {
            "name": "Mike",
            "marks": {
                "physics": 70,
                "history": 80
            }
        }
    }
}
# solution
print(sampleDict['class']['student']['marks']['history'])

4: Initialize dictionary with default values
s-   employees = ['Kelly', 'Emma']
    defaults = {"designation": 'Developer', "salary": 8000}
    res = dict.fromkeys(employees, defaults)
    print(res)
    # Individual data
    print(res["Kelly"])

5: Create a dictionary by extracting the keys from a given dictionary
s - sampleDict = { 
      "name": "Kelly",
      "age":25, 
      "salary": 8000, 
      "city": "New york" }
    keys = ["name", "salary"]
    newDict = {k: sampleDict[k] for k in keys}
    print(newDict)
or 
    res = dict()
    for k in keys:
        res.update({k: sample_dict[k]})
    print(res)
    
6: Delete a list of keys from a dictionary
s - for k in keys:
    sample_dict.pop(k)
    print(sample_dict)
or  
    sample_dict = {k: sample_dict[k] for k in sample_dict.keys() - keys}
    print(sample_dict)

7: Check if a value exists in a dictionary
s - sample_dict = {'a': 100, 'b': 200, 'c': 300}
    if 200 in sample_dict.values():
    print('200 present in a dict')

8: Rename key of a dictionary
s - sample_dict['location'] = sample_dict.pop('city')
    print(sample_dict)

9: Get the key of a minimum value from the following dictionary
 s-  sample_dict = {
        'Physics': 82,
        'Math': 65,
        'history': 75
    }
    print(min(sample_dict, key=sample_dict.get))

10 :Write a Python program to change Brad’s salary to 8500 in the following dictionary.
s- sample_dict = {
    'emp1': {'name': 'Jhon', 'salary': 7500},
    'emp2': {'name': 'Emma', 'salary': 8000},
    'emp3': {'name': 'Brad', 'salary': 6500}
    }
    
    sample_dict['emp3']['salary'] = 8500
    print(sample_dict)     

-------------------------------------------------------------------------------------Date and Time Excerise-------------------------------------------------------------------------------------

1: Print current date and time in Python
s - import datetime
    print(datetime.datetime.now())
    print(datetime.datetime.now().time())
or  from time import gmtime, strftime
    print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))

2: Convert string into a datetime object
s - from datetime import datetime
    date_string = "Feb 25 2020  4:20PM"
    datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
    print(datetime_object)

3: Subtract a week (7 days)  from a given date in Python
s - 
